name: Deploy to Dev Environment

on:
  push:
    branches:
      - dev

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set lower-case repository name
        run: echo "REPO_LOWER=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # - name: Install Trivy
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install wget apt-transport-https gnupg lsb-release -y
      #     wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
      #     echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
      #     sudo apt-get update
      #     sudo apt-get install trivy -y

      # - name: Run Trivy Vulnerability Scan in repo mode
      #   env:
      #     TRIVY_USERNAME: ${{ secrets.DOCKER_USER }}
      #     TRIVY_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      #     GITHUB_TOKEN: ${{ secrets.SUPER_PAT }}
      #   run: |
      #     trivy repo \
      #       --db-repository public.ecr.aws/aquasecurity/trivy-db \
      #       --java-db-repository public.ecr.aws/aquasecurity/trivy-java-db \
      #       --scanners vuln,secret \
      #       --format table \
      #       --ignore-unfixed \
      #       --severity CRITICAL,HIGH \
      #       --output "trivy-results-repo.txt" \
      #       https://github.com/Helium-Health/helium-kudos-server

      - name: Build and push Docker image
        run: |
          docker build -t onemed/helium-kudos-server-staging -t ghcr.io/helium-health/${{ env.REPO_LOWER }}-staging .
          # docker push onemed/helium-kudos-server-staging
          docker push ghcr.io/helium-health/${{ env.REPO_LOWER }}-staging

      # - name: Run Trivy Vulnerability Scan
      #   env:
      #     TRIVY_USERNAME: ${{ secrets.DOCKER_USER }}
      #     TRIVY_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      #   run: |
      #     trivy image \
      #       --db-repository public.ecr.aws/aquasecurity/trivy-db \
      #       --java-db-repository public.ecr.aws/aquasecurity/trivy-java-db \
      #       --scanners vuln \
      #       --output trivy-results-image.txt \
      #       ghcr.io/helium-health/${{ env.REPO_LOWER }}-dev:latest

      # - name: Upload Trivy scan results to artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: trivy-results
      #     path: |
      #       trivy-results-repo.txt
      #       trivy-results-image.txt

      - name: Set up ArgoCD CLI
        run: |
          sudo curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo chmod +x /usr/local/bin/argocd

      - name: ArgoCD Login
        run: |
          yes | argocd login ${{ vars.ARGOCD_STAGING_URL }} --insecure --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }}

      - name: ArgoCD Sync App
        env:
          APP_NAME: helium-kudos-server-dev
        run: |
          argocd app actions run $APP_NAME restart --kind Deployment --resource-name helium-kudos-server-dev --all
