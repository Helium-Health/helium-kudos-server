name: Deploy to Staging Environment

on:
  push:
    branches:
      - staging
env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Run Trivy Vulnerability Scan on multiple files and file system
        env:
          TRIVY_USERNAME: ${{ secrets.DOCKER_USER }}
          TRIVY_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          trivy fs \
            --db-repository public.ecr.aws/aquasecurity/trivy-db \
            --java-db-repository public.ecr.aws/aquasecurity/trivy-java-db \
            --scanners vuln \
            --output trivy-results-repo.txt \
            --severity HIGH,CRITICAL \
             ./blob/dev/package.json \

      - name: Run Trivy Vulnerability Scan
        env:
         TRIVY_USERNAME: ${{ secrets.DOCKER_USER }}
         TRIVY_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
         trivy image \
            --db-repository public.ecr.aws/aquasecurity/trivy-db \
            --java-db-repository public.ecr.aws/aquasecurity/trivy-java-db \
            --scanners vuln \
            --output trivy-results-image.txt \
            onemed/helium-kudos-server-staging


      - name: Upload Trivy scan results to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: |
            trivy-results-repo.txt
            trivy-results-image.txt                       
             
                            

      - name: Set up ArgoCD CLI
        run: |
          sudo curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo chmod +x /usr/local/bin/argocd

      - name: ArgoCD Login
        run: |
          yes | argocd login ${{ vars.ARGOCD_STAGING_URL }} --insecure --username ${{ secrets.ARGOCD_USERNAME }} --password  ${{ secrets.ARGOCD_PASSWORD }}

      - name: ArgoCD Sync App
        env:
          APP_NAME: helium-kudos-server-staging
        run: |
          argocd app actions run $APP_NAME restart --kind Deployment --resource-name helium-kudos-server-staging --all
          
